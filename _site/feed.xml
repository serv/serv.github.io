<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason Kim</title>
    <description>Writings on software and other topics
</description>
    <link>http://jasonkim.ca/</link>
    <atom:link href="http://jasonkim.ca/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Oct 2016 10:56:04 -0700</pubDate>
    <lastBuildDate>Sun, 09 Oct 2016 10:56:04 -0700</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Easily Overlook Parts on Developing REST API</title>
        <description>&lt;p&gt;I recently transitioned off the API team and moved
work on web client team at work. I wanted to share
some things I wish I had known when I was deepdiving
in developing REST API.&lt;/p&gt;

&lt;h2 id=&quot;stability-uber-alles&quot;&gt;1. Stability uber alles&lt;/h2&gt;

&lt;p&gt;You can drop nearly everything on the ground and
focus on restoring stability of the API. No one
will mind.&lt;/p&gt;

&lt;h2 id=&quot;versioned-api-from-the-start&quot;&gt;2. Versioned API from the start&lt;/h2&gt;

&lt;p&gt;APIs are suppose to return consistent data that’s
been agreed by the server and the client. There
are times when the server must change the response
body structure to serve the needs of some clients
better. You should not change the response structure
for a given endpoint in such case. You should
version your API so that you can serve the needs
of the old clients and new clients equally well.&lt;/p&gt;

&lt;p&gt;Versioning can easily be a topic of conversation
on its own, but here are several considerations
you need to make when you implement versioning.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Where is versioning going to occur?
At load balancer or at app?&lt;/li&gt;
  &lt;li&gt;Is it going to be done via header or url?&lt;/li&gt;
  &lt;li&gt;How are you going to isolate the code change to
remain within a specific version? Also while
ensuring that the versioning doesn’t make coding
any more difficult.&lt;/li&gt;
  &lt;li&gt;How will you automatically test the newly
versioned APIs?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-api-specs&quot;&gt;3. Use API specs&lt;/h2&gt;

&lt;p&gt;Make use of spec to come to an agreement between
you and the clients before building the API.
You will be able to serve their needs better and
also possibly explain to the clients your limitations.&lt;/p&gt;

&lt;h2 id=&quot;load-testing&quot;&gt;4. Load testing&lt;/h2&gt;

&lt;p&gt;I didn’t realize how important this is until
our production environment was adversely affected
by some feature changes we made without properly
load testing them first. Develop a load testing
strategy for your codebase and be ready to reject
code changes that could affect production
environment negatively.&lt;/p&gt;

&lt;h2 id=&quot;leverage-your-teammates-and-clients-for-advice&quot;&gt;5. Leverage your teammates and clients for advice&lt;/h2&gt;

&lt;p&gt;Compared to other kind of products I used to work
on developers usually have more correct opinions
about building API.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Oct 2016 09:45:58 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/10/09/easily-overlooked-parts-on-developing-rest-api/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/10/09/easily-overlooked-parts-on-developing-rest-api/</guid>
        
        
        <category>api</category>
        
        <category>rest</category>
        
      </item>
    
      <item>
        <title>Benchmarking Web Frameworks</title>
        <description>&lt;p&gt;I had some time over the weekend, and I decided that I would benchmark some
web frameworks for possible backend API to work with in the future. I copied
&lt;a href=&quot;https://github.com/koajs/koa/blob/master/benchmarks/run&quot;&gt;how Koa.js does its benchmark&lt;/a&gt;.
I prepared &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;,
&lt;a href=&quot;http://restify.com/&quot;&gt;Restify&lt;/a&gt;, and &lt;a href=&quot;http://sparkjava.com/&quot;&gt;Spark&lt;/a&gt; to be
benchmarked. You can see &lt;a href=&quot;https://github.com/serv/framework-benchmarks&quot;&gt;the code hosted on GitHub here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the results of the benchmarks. The number represents requests / second.
Higher is better.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;frameworks&lt;/th&gt;
      &lt;th&gt;req/s&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ruby on rails&lt;/td&gt;
      &lt;td&gt;48.73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;restify&lt;/td&gt;
      &lt;td&gt;8117.63&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spark&lt;/td&gt;
      &lt;td&gt;32634.10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gOoneii.png&quot; alt=&quot;Web framework benchmarked&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I knew Ruby on Rails is slow, but I had no idea that it’s this slow. And on
the other hand, I knew Java web frameworks are generally fast, but I had no
idea that Spark is that fast! And Restify occupies a sweet spot between
Ruby on Rails and Spark.&lt;/p&gt;

&lt;p&gt;We can draw some conclusions from the findings.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use Spark for very highly trafficked microservices that requires requests
to be served at low latency&lt;/li&gt;
  &lt;li&gt;Use Restify for all kinds of backend API when you want to leverage a vast
catalog of Node.js packages and great development tools&lt;/li&gt;
  &lt;li&gt;Reserve using Ruby on Rails for product oriented application only.
I would not recommend Ruby on Rails for backend API that needs to
serve a large traffic.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 21:45:58 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/07/21/benchmarking-web-frameworks/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/07/21/benchmarking-web-frameworks/</guid>
        
        
        <category>node.js</category>
        
        <category>ruby</category>
        
        <category>java</category>
        
        <category>restify</category>
        
        <category>spark</category>
        
        <category>ruby on rails</category>
        
      </item>
    
      <item>
        <title>Fixing Memory Leak on Production Node.js Application</title>
        <description>&lt;p&gt;The last few days at work were rough.
My team was intensely focused on
preparing the production environment to be stable.
We’ve been having some
serious issues on the production environment.
One of the most serious production issues was a
nasty memory leak.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lEnDrWZ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The graph above displays the memory usage of
12 node applications on our production
environment. The y-axis shows the memory usage
in percentage and the x-axis shows the time
span of 7 days. This narrow sawtooth
pattern on memory usage is extremely bad.
As you can see, all 12 servers
are accumulating usage in memory rapidly.
As a remedy for the memory leak, we had to
periodically restart our servers. This was less
than ideal, but because we had so many other
really high priority items last few weeks, we
just had to bite our tongue and suck it up.
However, the frequency at which we had to
restart our server started to increase.
We had to restart our servers every few days,
then every day, then it came to a point where we
were restarting our servers every 4 to 5 hours.
Thank god we have a globally distributed team
(Croatia, and Argentina), it could’ve been a
lot tougher without having team members in other
timezones. I can’t
emphasize this point enough, and I will take
another opportunity to praise having globally
distributed software development team in another
post in the future.&lt;/p&gt;

&lt;p&gt;After some &lt;a href=&quot;http://blog.jasonkim.ca/blog/2016/06/02/battle-technical-assumptions/&quot;&gt;pitfalls&lt;/a&gt;, we fixed the
memory leak. As you can see below, the overall
memory usage stays flat after 13:30 PM after our
memory leak fix was applied.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JnCgcoi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We came up with several different strategies to
fix the memory issue, but the working solution
came down to comparing two memory dumps at
different times and comparing their content.
I used &lt;a href=&quot;http://man7.org/linux/man-pages/man1/gcore.1.html&quot;&gt;gcore&lt;/a&gt; on a production server to gather a
memory dump soon after the server restart when
the memory usage is around 30%. After around
3 hours when the memory usage for the server
starts to hover around 60%, I took another memory
dump. I used &lt;a href=&quot;https://docs.oracle.com/cd/E18752_01/html/816-5041/chapter-8.html&quot;&gt;mdb&lt;/a&gt; on a local VM running
Solaris 11 to analyze the two memory dumps.&lt;/p&gt;

&lt;p&gt;Here is the memory dump of the production server
at around 30% memory usage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;73ce2207ea9     4643        2 Arguments: 0, length
101b5ab4f71     5519        4 Object: albumId, albumNames, ...
 9719767799     6070        2 Object: localeCode, value
 971977c371     6966        1 Object: entry
1102bfc1dc31     8775        2 Object: id, genreIds
 971977b021     9086        2 Object: ids, href
 971973e051     9430        3 Array
    3015e01    16203        0 Object
 971974c9c9    19854        1 Object: nr_exclusive_duration_millis
 9719710199    19917       13 TraceSegment: name, transaction, ...
 971971cb11    20186        7 Timer: state, touched, duration, ...
    342d8d9    49769        0 Array
 971971cbb9    59489        1 Array
 971970f1c9    71743        2 Array
     OBJECT #OBJECTS   #PROPS CONSTRUCTOR: PROPS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here is the memory dump of the production
server at around 80% around 4 hours after
the server restart.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1102bfc1dc31   8775        2 Object: id, genreIds

...

110879a2c9    14099        6 ExponentialBackoffStrategy: ...
1108779561    15593        3 Array
45357fdf31    17059        2 Object: ids, href
   3015db1    34680        0 Object
110875b221    35287        4 Object: albumId, albumNames, ...
110875b2c9    38401        1 Object: entry
110875aff1    38481        2 Object: localeCode, value
1108708d51   198161        0 Array
1108706ae1   202984        1 Array
1108706a81   206039        1 Object: nr_exclusive_duration_millis
11087046d9   209896       13 TraceSegment: name, transaction, ...
1108704801   223481        7 Timer: state, touched, duration, ...
1108706aa1   507224        2 Array
    OBJECT #OBJECTS   #PROPS CONSTRUCTOR: PROPS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The most notable cause of the memory increase is
&lt;code class=&quot;highlighter-rouge&quot;&gt;TraceSegment: name, transaction, ...&lt;/code&gt;.
You can see that the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;TraceSegment&lt;/code&gt;
object count increased by 10 folds going
from 19917 to 209896. You can also see some
other object such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Timer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;
increasing. This is because those are properties
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;TraceSegment&lt;/code&gt; object.
Contrast this number with the genre-tags object
that stayed exactly the same
&lt;code class=&quot;highlighter-rouge&quot;&gt;2 Object: id, genreIds&lt;/code&gt; at 8775. That object
is a json file parsed into memory at startup
of the app and it does not increase. This
suggests to me that the memory dump is indeed
accurate, and Node retains memory steady on
correctly coded objects.&lt;/p&gt;

&lt;p&gt;It turns out &lt;code class=&quot;highlighter-rouge&quot;&gt;TraceSegment&lt;/code&gt; objects are created
by &lt;a href=&quot;https://github.com/newrelic/node-newrelic/blob/1e7bbbaf34a15f0bb35aca63b0d8a3cfa2669d27/lib/transaction/trace/segment.js&quot;&gt;NewRelic&lt;/a&gt;. The fact that
I wasn’t able to recreate the severity of
memory leak convincingly on the development
environment from previous attempts also tells
me that the memory leak was caused by something
happening on the production environment.&lt;/p&gt;

&lt;p&gt;We get some benefits of having NewRelic monitoring, but disabling NewRelic on
production was no-brainer at this point.
We had to do it. We all acknowledged that
NewRelic is not the initial cause of the memory leak.
There is still something in our code that is
behaving naughtily with NewRelic, but we
got to put our the damn fire on production
first. So we did it. We disabled NewRelic
on production and the memory usage stopped
climbing and it remains very steady for now.&lt;/p&gt;

&lt;p&gt;I want to thank &lt;a href=&quot;https://yunong.io/2015/11/13/debugging-node-js-in-production/&quot;&gt;Yunong Xiao for sharing
Netflix’s experience on debugging Node.js in
production&lt;/a&gt;. It informed me about
useful tools in the wild and taught me how
I can use those tools to find the cause
of the memory leak. I also want to thank
&lt;a href=&quot;http://bryce.is/writing/code/mdb_v8/vm/virtualbox/omnios/2016/02/06/mdbv8-getting-started.html&quot;&gt;Bryce Neal for writing a detailed tutorial on setting up Solaris to use MDB&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jun 2016 22:30:56 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/06/02/fixing-memory-leak-on-production-node-application/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/06/02/fixing-memory-leak-on-production-node-application/</guid>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Battle Technical Assumptions</title>
        <description>&lt;p&gt;I was burned pretty bad yesterday. I’ve told myself many times to battle assumptions about feature and product requirements, and that product managers cannot give 100% oversight on what I am working on. Now I am going to add another kind of assumption I will question every time. The kind I am talking about is a technical assumption.&lt;/p&gt;

&lt;p&gt;Just like assumptions you make about a feature or a product, as a developer, making wrong technical assumptions can cost you dearly. Making technical assumptions get you started with the development faster, but you are playing a Russian roulette with yourself if you don’t have adequate technical planning to accompany your development process.&lt;/p&gt;

&lt;p&gt;Wrong technical assumptions can lead you to think that you are able to accomplish something when it is not technically feasible. I learned this the hard way yesterday at work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UtV84yu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Currently we are having some nasty memory leak problem on the production environment coupled with unstable Redis storage and periodic slow down of upstream services.
My team is working really hard to resolve the issue.
After researching how to debug production Node systems, I decided that I would try getting some memory snapshots on a production server, and examine what is causing the memory increase.
I chose to use &lt;a href=&quot;https://github.com/bnoordhuis/node-heapdump&quot;&gt;heapdump&lt;/a&gt; to get V8 heap snapshots, and use Chrome’s developer tools’ profiler to examine the data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tOL9Xir.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In theory this was just perfect.
In practice, I made some unsound technical assumptions which resulted in a full day wasted.
Our local development environment are running Node 4.2.4 and the latest NPM 3.x. I was able to install Heapdump package no problem locally. But on the production environment, we are still running NPM 1.x!
I couldn’t find a way to install Heapdump on production. This problem itself can be solved by updating NPM obviously, but we haven’t fully tested how NPM 3 would work with our deployment process to our beta, load, and production environment.
Also any infrastructure change must be orchestrated through our TechOps team, and that typically takes several days to coordinate all efforts.&lt;/p&gt;

&lt;p&gt;Wrong technical assumptions are just as deadly as feature/product assumptions.
I will plan out more granular and incremental steps to determine how each development process will be carried out to meet the acceptance criteria of the feature story from now on.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jun 2016 22:30:56 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/06/01/battle-technical-assumptions/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/06/01/battle-technical-assumptions/</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Using Recursive Depth-first Traversal to Make API Calls to the Object’s Children</title>
        <description>&lt;p&gt;I solved an interesting problem at work
recently, so I wanted to discuss that here.&lt;/p&gt;

&lt;p&gt;At Rhapsody, we handle millions of tracks and
tracks are categorized under hundreds of genres.
Genres are related to other genres by being
a parent or a child to another genre. A genre
may have up to 1 parent genre and have as many
children genres. Some top level genres such as
rock, pop, and hip hop do not have any parents.
It looks like a tree. The figure below is an
simplified example of how a genre tree looks
like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ynbGcss.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some genres have tags associated with them.
Tags are objects that describes what kind of
quality a piece of content has. Drake’s latest
album, Views, feels summery, catchy, soulful
and reflective. Then Views will have tags like
summer, pop, soulful and reflective.&lt;/p&gt;

&lt;p&gt;Now there was a problem where we had a way to
retrieve genres from tags, but we could not
retrieve tags from genres. As a temporary solution
to the problem, we decided that we would build and
store the mapping of going from genres to tags as
a static JSON file.&lt;/p&gt;

&lt;p&gt;Genre tags are similar to genres themselves, and
genre tags also have a tree data structure. Each
tag has a parent tag and can have many children
tags.&lt;/p&gt;

&lt;p&gt;In order to go through the entire genre tags tree,
I decided that I would implement recursive depth
first traversal method in ruby to make API calls to
retrieve data on all genre tags and its children.&lt;/p&gt;

&lt;p&gt;There are different parts to the code to accomplish
this, but let’s just look at the meatest part of
the code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;childrenTagList&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;childrenTagList&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;genreIds&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;genreIds&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;genreIds&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;genreIds&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;childrenTagList&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CATALOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt; which is a string and
&lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; which contains pairs of tag_id and
genre_id. I better check for the terminating
condition. The terminating condition is to check
to see if the tag has any children tags. If it
doesn’t have any children tags, I proceed to
populate the array with the tag-genre pair and
return the array. Otherwise, I should still
populate the array with the tag-genre pair. But in
addition to that, I have to recursively call
&lt;code class=&quot;highlighter-rouge&quot;&gt;get_children&lt;/code&gt; for all children tags.
&lt;code class=&quot;highlighter-rouge&quot;&gt;get_children&lt;/code&gt; is responsible for requesting
metadata of children tags given a tag ID, using
&lt;a href=&quot;https://github.com/lostisland/faraday&quot;&gt;Faraday&lt;/a&gt;.
The response body in JSON format is parsed by
&lt;a href=&quot;https://github.com/ohler55/oj&quot;&gt;Oj&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 00:47:42 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/05/29/recursive-depth-first-traversal/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/05/29/recursive-depth-first-traversal/</guid>
        
        
        <category>algorithms</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Time Saving Tips for Software Development for Developers</title>
        <description>&lt;p&gt;I waste a lot of time not coding. Typical work involves many activities,
that are process related chores, meetings and etc, so only a fraction of time
can be spent on coding and working on a feature. I find it important that
you should try to squeeze most out of this time as possible.&lt;/p&gt;

&lt;p&gt;I try to understand the product feature and its use cases before I begin
coding on a feature.
In an ideal world, your product owner will write a perfect story that
doesn’t require any edits whatsoever. This never happens. Product owners are
humans and they will usually write an insufficient story
when the stories are sufficiently large and complicated.
Developers must be able to wear the product owner’s hat to come up with the
rest of the acceptance requirements for a story.
Try to come up with what makes sense and what doesn’t make sense about the
story. While you are trying to come up with what makes sense,
bring it up with your product owner to see if some additional acceptance
criteria needs to be added. When things don’t make sense in the story, also
bring it up with product owner sooner rather than later.&lt;/p&gt;

&lt;p&gt;Here’s another thing I do before I begin coding.
I spend a good length of time thinking about the software design of the feature.
Explore how each acceptances in the story can be mapped to your software design.
Your code builds on top of other code you wrote.
Code you write has inertia. Early on during the coding phase, you can make
small and large changes without much trouble. You are nimble when your code
for the feature isn’t large yet. But when you have to change the software design
later on down the road, changing your existing code that has grown larger
is way more difficult. There are many more moving parts and each changes
you have to make in your code will need to make multiplicative changes across
your code base. Also engage your teammates in brainstorming session and
pick their brains on how they think the code should look.&lt;/p&gt;

&lt;p&gt;After you are completed with coding, have a rigorous code review with your
coworker. I was wrong about this before. I have been doing more lenient
code review that left quite a room for disagreement. Be respectful in your
tone and watch out for strong language. Messages do not get understood
best over the web, especially when that message is about criticizing your code.
This code review should be contrasted with nitpicking. It’s not about trying
to inject your preference for the code. It should be about writing good code.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Apr 2016 17:47:42 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2016/04/09/software-development-time-saving/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2016/04/09/software-development-time-saving/</guid>
        
        
        <category>software development</category>
        
      </item>
    
      <item>
        <title>The Deployment Minefield</title>
        <description>&lt;p&gt;I find deployments hard. But why? I conjectured a few reasons why.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You don’t practice setting up deployments too often.&lt;/li&gt;
  &lt;li&gt;When you do the setup, you usually mindlessly copypasta the command
from internet.&lt;/li&gt;
  &lt;li&gt;And you finally make it work without any deep understanding, well
you never try to relearn what you’ve done.&lt;/li&gt;
  &lt;li&gt;Deployment is actually a hard subject that touches on many different
complex systems.&lt;/li&gt;
  &lt;li&gt;When something goes wrong, it’s hard to fix or undo. And you might
compound the problem by trying to fix it by copypasta-ing even more crap.&lt;/li&gt;
  &lt;li&gt;You might not even be aware of the problem at all. You could’ve done
something an hour that fucked up the deployment process, but you might
be trying to undo something you did 10 minutes ago. Diagnosis of the
problem is really hard for deployment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What is the remedy for these problem?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You have to practice deployment like everything else. In order to
practice something you need a meticulous guideline on how to practice.
There for document everything!&lt;/li&gt;
  &lt;li&gt;Understand each steps you are performing. Never just copypasta
something. Even better, understand the system you are using.&lt;/li&gt;
  &lt;li&gt;Even after you make something work, go back and review what you’ve
just done.&lt;/li&gt;
  &lt;li&gt;Learn the system you are using. Again, don’t just copypasta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I find that 5 and 6 are rather hard problems. You need really good
understanding of the system in order to debug some problem.
Otherwise, you just end up googling same shit over and over again.
Maybe I’ll come up with some solution for them later down the road.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2015 16:47:42 -0800</pubDate>
        <link>http://jasonkim.ca/blog/2015/12/22/the-deployment-minefield/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2015/12/22/the-deployment-minefield/</guid>
        
        
        <category>Dev Ops</category>
        
      </item>
    
      <item>
        <title>Setting up Phoenix 1.0 on Mac OS X Yosemite (With Troubleshooting Steps)</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt; is a promising
&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; web framework that is fast and productive.
I heard about Phoenix through a coworker a couple of weeks
ago and started playing with it.
Then stopped for a while, until I heard that the framework finally
hit &lt;a href=&quot;https://news.ycombinator.com/item?id=10135825&quot;&gt;1.0 on Hacker News&lt;/a&gt;.
There were many praises for the framework and success stories
that I thought I had to try it again.&lt;/p&gt;

&lt;p&gt;This is a summary of what I did to set up Phoenix 1.0 on
Mac OS X Yosemite (Version 10.10.5). I also included how
I solved some odd errors that appeared during installation process.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ brew install elixir&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix local.hex&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix archive.install https://github.com/phoenixframework/phoenix/releases/download/v1.0.0/phoenix_new-1.0.0.ez&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;In this step, you might see this error.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 ** (Mix) Could not access url https://github.com/phoenixframework/phoenix/releases/download/v1.0.0/phoenix_new-1.0.0.ez, error: {:failed_connect, [{:to_address, {&#39;github.com&#39;, 443}}, {:inet, [:inet], :nxdomain}]}
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;To solve this issue, you need to ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.mix/archives directory&lt;/code&gt; has write permission.&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo chmod a+rw ~/.mix/archives/&lt;/code&gt; then try running #3 again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Go into the directory where you want your Phoenix app to live.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix phoenix.new hello_phoenix&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Say yes to &lt;code class=&quot;highlighter-rouge&quot;&gt;Fetch and install dependencies? [Yn] y&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;You might see an error during this process. And most likely, it’s happening because your Phoenix project directory doesn’t have write permission.&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo chmod -R a+rw hello_phoenix&lt;/code&gt;.
 Then try running #5 again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt; with node &amp;gt; 0.12.0&lt;/li&gt;
  &lt;li&gt;Ensure that you have postgresql running.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix ecto.create&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;You might get this error.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
 ** (Mix) The database for HelloPhoenix.Repo couldn&#39;t be created, reason given: &quot;psql: FATAL:  role \&quot;postgres\&quot; is not permitted to log in\n&quot;.
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ psql postgres&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;In the psql, run &lt;code class=&quot;highlighter-rouge&quot;&gt;CREATE ROLE postgres;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix ecto.create&lt;/code&gt; again.&lt;/p&gt;

    &lt;p&gt;You might get this error.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
 ** (Mix) The database for HelloPhoenix.Repo couldn&#39;t be created, reason given: &quot;psql: FATAL:  role \&quot;postgres\&quot; is not permitted to log in\n&quot;.
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;In the psql, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER ROLE postgres LOGIN;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix ecto.create&lt;/code&gt; again.&lt;/p&gt;

    &lt;p&gt;You might get this error.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
 ** (Mix) The database for HelloPhoenix.Repo couldn&#39;t be created, reason given: &quot;ERROR:  permission denied to create database\n&quot;.
&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;In the psql, run &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER ROLE postgres CREATEDB;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Now try &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix ecto.create&lt;/code&gt; again&lt;/p&gt;

    &lt;p&gt;You should see &lt;code class=&quot;highlighter-rouge&quot;&gt;The database for HelloPhoenix.Repo has been created.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mix phoenix.server&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to http://localhost:4000/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/o7mD8Fv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 22:15:10 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2015/09/01/setting-up-phoenix-1-dot-0-on-mac-os-x-yosemite/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2015/09/01/setting-up-phoenix-1-dot-0-on-mac-os-x-yosemite/</guid>
        
        
        <category>elixir</category>
        
        <category>phoenix</category>
        
      </item>
    
      <item>
        <title>Don&#39;t say something is easy</title>
        <description>&lt;p&gt;“Oh, that’s easy.”&lt;/p&gt;

&lt;p&gt;We say this often when we help beginners with coding. I think we say this
for several reasons, but one big reason is to encourage the beginner that
he or she can solve the problem by reducing the perceived difficulty of the
problem. However, in reality, this probably has an adverse effect.
First of all, it’s condescending. It puts the beginner’s confidence down.
He or she must be thinking, “If this is so easy, why can’t I do it?”
You might even be wrong that it’s an easy problem. There may be details of
the problem you haven’t noticed yet that genuinely difficult problem
look very easy.&lt;/p&gt;

&lt;p&gt;I believe that you can omit saying “That’s easy,” completely and help
out someone effectively. Just treat problems beginners have as a problem
you and your colleagues have. Don’t belittle the beginner with phrases like
“That’s easy” and just focus on what the problem is and helping them solve
the problem.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 19:59:37 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2015/07/24/dont-say-something-is-easy/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2015/07/24/dont-say-something-is-easy/</guid>
        
        
        <category>programming</category>
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Unfair</title>
        <description>&lt;p&gt;I found out that someone who is a friend and a coworker passed away years ago,
and I didn’t know about it until today. I felt bad that I hadn’t tried to
reach out to him more when I had the chance. He was a sincere guy who was
always positive. It makes me angry that someone so good passed away when he
was just 23. All the possibilities and dreams he might have had, they are all
gone. He didn’t even get a shot at life.&lt;/p&gt;

&lt;p&gt;People talk about unfairness a lot. They complain about how things are so
unfair in life. I do too. In a way, this game called life is rigged. Some people
really have many advantages in life while other don’t. You can rightly
complain about how life is unfair because it really is so. But what does that
get you? Nothing. It’ll in fact mess you up even more. It’ll weaken you and
keep you stagnant. If you notice you are behind, think about how you are
going to catch up.&lt;/p&gt;

&lt;p&gt;In fact, a vast majority of people even if they are way way behind others,
if they are living a life, working hard, studying, striving to better
himself and others, they are trying. Everyday, you get another chance at life.
A chance some others don’t have.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 20:48:51 -0700</pubDate>
        <link>http://jasonkim.ca/blog/2015/07/03/unfair/</link>
        <guid isPermaLink="true">http://jasonkim.ca/blog/2015/07/03/unfair/</guid>
        
        
        <category>musings</category>
        
      </item>
    
  </channel>
</rss>
