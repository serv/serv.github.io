{"pageProps":{"post":{"title":"Metaprogramming in Ruby should be avoided if possible","createdAt":"2015-06-06T00:00:00-07:00","categories":["ruby"],"slug":"metaprogramming-in-ruby-should-be-avoided-if-possible","fullPath":"/home/jason/projects/websites/serv.github.io/_posts/2015-06-06-dont-over-metaprogram-in-ruby.md","content":"<p>This isn't the first time <a href=\"https://www.google.com/webhp?sourceid=chrome-instant&#x26;ion=1&#x26;espv=2&#x26;ie=UTF-8#q=metaprogramming%20harmful\">someone has considered metaprogramming in ruby to be harmful</a>,\nand it won't be the last. Metaprogramming is useful when you are programming\nreactively against external changes that you have to account for with your\ncode. An example I like to use is the time when I had to create attributes\nfor an object based on external json object. So even if the json object\nchanges its attributes, the ruby program is able to account for the changed\nattributes.</p>\n<p>However, in the real world, proper use of metaprogramming is infrequent.\nI would even venture to say that, if you are considering doing something\nwith metaprogramming in Ruby, stop and try to solve it without metaprogramming.</p>\n<p>Metaprogramming is not obvious and even to the author himself, it'll become\nless obvious over time. Metaprogramming often ends up ugly. This is\ncertainly true for someone else reading the code. It is harder to debug.\nYou end up having a hard time finding the code using <code>grep</code> or the text editor because\nthe code is obscured via metaprogramming.</p>\n<p>If you must metaprogram, document it well. Let your colleagues know what you\nare doing. Be very open about how your metaprogramming works. And it never\nhurts to get a second opinion on how you can avoid doing this altogether.</p>\n"}},"__N_SSG":true}