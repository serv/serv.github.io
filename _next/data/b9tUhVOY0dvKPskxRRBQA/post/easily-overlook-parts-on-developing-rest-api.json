{"pageProps":{"post":{"title":"Easily Overlook Parts on Developing REST API","createdAt":"2016-10-09T00:00:00-07:00","categories":["api","rest"],"slug":"easily-overlook-parts-on-developing-rest-api","fullPath":"/home/jason/projects/websites/serv.github.io/_posts/2016-10-09-easily-overlooked-parts-on-developing-rest-api.md","content":"<p>I recently transitioned off the API team and moved\nwork on web client team at work. I wanted to share\nsome things I wish I had known when I was deepdiving\nin developing REST API.</p>\n<h2>1. Stability uber alles</h2>\n<p>You can drop nearly everything on the ground and\nfocus on restoring stability of the API. No one\nwill mind.</p>\n<h2>2. Versioned API from the start</h2>\n<p>APIs are suppose to return consistent data that's\nbeen agreed by the server and the client. There\nare times when the server must change the response\nbody structure to serve the needs of some clients\nbetter. You should not change the response structure\nfor a given endpoint in such case. You should\nversion your API so that you can serve the needs\nof the old clients and new clients equally well.</p>\n<p>Versioning can easily be a topic of conversation\non its own, but here are several considerations\nyou need to make when you implement versioning.</p>\n<ul>\n<li>Where is versioning going to occur?\nAt load balancer or at app?</li>\n<li>Is it going to be done via header or url?</li>\n<li>How are you going to isolate the code change to\nremain within a specific version? Also while\nensuring that the versioning doesn't make coding\nany more difficult.</li>\n<li>How will you automatically test the newly\nversioned APIs?</li>\n</ul>\n<h2>3. Use API specs</h2>\n<p>Make use of spec to come to an agreement between\nyou and the clients before building the API.\nYou will be able to serve their needs better and\nalso possibly explain to the clients your limitations.</p>\n<h2>4. Load testing</h2>\n<p>I didn't realize how important this is until\nour production environment was adversely affected\nby some feature changes we made without properly\nload testing them first. Develop a load testing\nstrategy for your codebase and be ready to reject\ncode changes that could affect production\nenvironment negatively.</p>\n<h2>5. Leverage your teammates and clients for advice</h2>\n<p>Compared to other kind of products I used to work\non developers usually have more correct opinions\nabout building API.</p>\n"}},"__N_SSG":true}