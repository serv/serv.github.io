{"pageProps":{"post":{"title":"10 Years As a Software Engineer","createdAt":"2022-04-08T15:15:28-07:00","categories":[],"slug":"10-years-as-a-software-engineer","fullPath":"/Users/jasonkim/projects/websites/serv.github.io/_posts/2022-04-08-10-years-as-a-software-engineer.md","content":"<p>The year 2022 marks the 10th year I've worked as a software engineer professionally.\nThere are lots of good memories, but I was noticing that I am starting to forget about the things I've done and learned.\nThis post is to archive the experience I had as a software engineer for the last 10 years or so.</p>\n<h2>Beginning</h2>\n<p>I learned about Ruby on Rails in 2010 and read <a href=\"https://www.railstutorial.org/book\">Ruby on Rails Tutorial</a> by Michael Hartl.\nI became familiar with the basics of web app development. I started to have hope that maybe I can code a web app on my own.</p>\n<h2>Vidyard (Sep 2011 - Dec 2011)</h2>\n<p>This was my first programming coop job. When I think back, I was really lucky to get this job.\nVidyard is now a pretty big company now in Waterloo, Canada, but at the time I joined,\nthere were less than 10 people in the company.\nIt was a small company, but the spirit was high. It was so fun working there. The founders cared greatly about everyone they hired.\nThey made me feel welcome and be part of the company, even though I was just a coop who will work they just for 4 months.\nI saw the leaders of the company becoming important focal points in the Waterloo tech scene.\nThey may be young and still inexperienced at the time, but they stood out among many founders coming out of Waterloo at the time. </p>\n<p>I learned a lot working just 4 months there. I learned to use javascript and jQuery more. I still was not good at using either, but\nexposure to it was important. I also shipped a feature that was sending out emails using Mailgun API. </p>\n<p>Working at Vidyard helped me decide that I want to become a software engineer. This was the most important realization I had\nfrom working here.</p>\n<h2>Rhapsody / Napster (July 2012 - March 2018)</h2>\n<p>After I finished school around May 2012, I was busy applying to different entry level jobs all over US and Canada.\nAfter failing many different interviews with different companies, I landed a job with Rhapsody, Seattle-based music streaming\ncompany.</p>\n<p>I worked on many different projects here. When I first joined the company, I built a FAQ / support page for the company.\nUnfortuatenly, it didn't go to production. I then started working on the web streaming application built on Ruby on Rails, jQuery and Flash.\nThis was early example of a single page web app. When I think back, it's actually amazing that\nsuch complex single page web app could be built with jQuery alone.</p>\n<p>After this, I had a chance to work on a brand new project of my own. Napster was preparing international launch in several countries\nin Europe and South America. I was asked to create a content managemeng system that can handle multiple regions and languages.\nI built the solution in Ruby on Rails and MySQL on the backend.</p>\n<p>I worked on Sountracking application and the webclient to enable social sign in featrues.</p>\n<p>I worked on the API Gateway which was built as the service our web and mobile clients was using.\nThis was the first Node.js application I worked on.</p>\n<p>Then I lead the development of the web application for Napster. I didn't realize it as much at the time\nbut now when I think back, it was another lucky opportunity for me. I was leading the web application for\nan app used by 2 million users at the time. It's unbelievable.</p>\n<p>The most important thing I did was creating the new audio playback engine for Napster's webclient.\nI deprecated the decade old Flash audio playback engine, and replacing it\nwith the HTML5 Audio player that is DRM compliant with all modern web browsers.</p>\n<p>I created the new audio player using <a href=\"https://github.com/videojs/video.js\">Video.js</a>.\nThe player was bundled with an newly emerging (at the time) builder called\n<a href=\"https://webpack.js.org/\">Webpack</a>.\nThe hard problem was supporting <a href=\"https://web.dev/media-eme/\">EME</a> from all the major browsers.\nEverything from development, testing and validating was an extreme undertaking and\nwhenever issues happened, reproducing the issues were challenging.\nTo make matters even more complicated, the browsers support different streaming protocols (DASH, HLS)\nand DRMs (Widevine, Playready, Apple Fairplay).\nThis accomplishment means a lot to me because when I first joined Napster in 2012,\nthe engineers in the web team were discussing ways to deprecate Flash player and move over to HTML5\nplayer. And in the end, I was able to do that.</p>\n<p>At Napster, I learned to become independant and solve difficult technical challenges on my own.</p>\n<h2>Coupang (March 2018 - Present)</h2>\n<p>I joined Coupang's advertising team as the number 2 engineer. The first thing I needed to do\nwas working on a data pipeline that provided the data foundation for other ad services\nto be built. I described my experience building the data pipeline here as a <a href=\"https://blog.jasonkim.ca/post/big-data-engineering-with-nodejs\">blog post</a>. I also gave a\n<a href=\"https://www.youtube.com/watch?v=HBHStmv4Y8g\">talk about it in Seattle.js meetup</a>.</p>\n<p>After this I worked on the Reporting UI for advertisers. This was built using Next.js, MySQL and Redis.\nThe Reporting UI is the window which the advertisers judge the entire Coupang ads offering, so it is important that the app works well.</p>\n<p>I am now working on Settlements app. The Settlements app determines how much advertisers need to be\ncharged monthly. The app is originally created by another engineer, but I took it over as a tech lead\nlater. The app is written in Java. I am currently rewriting the app using Spark instead of Sprign Batch.</p>\n<p>At Coupang, I learned to prioritize work based on business importance.</p>\n"}},"__N_SSG":true}