{"pageProps":{"post":{"title":"Using Next.js To Create Statically Generated Blog","createdAt":"2020-07-25T11:47:38-07:00","categories":["next.js","jekyll"],"slug":"using-nextjs-to-create-statically-generated-blog","fullPath":"/Users/jasonkim/projects/websites/serv.github.io/_posts/2020-07-25-using-nextjs-to-create-statically-generated-blog.md","content":"<p>I heard great things about <a href=\"https://tailwindcss.com/\">Tailwind.css</a> and I've wanted to\ntry it. I also wanted to redesign my blog and stop using\n<a href=\"http://octopress.org/\">Octopress</a>.\nThis was a good opportunity to do both by recreating my blog\nusing Tailwind.css and move away from using Octopress.\nI wanted to make sure I understood how different internal\nparts were working together to produce the static pages.\nI chose <a href=\"https://nextjs.org/\">Next.js</a> as it is a popular and well maintained tool\nthat is capable of turning React components into static\npages.</p>\n<p>My blog has two kinds of pages. I have an index page that fetches\nall the blog posts and show the list of posts. Another page I\nhave is a blog post page that shows the content of the blog post.</p>\n<p>The index page is created by getting a list of files in the\n<code>_posts</code> directory where I store all the blog posts in\nmarkdown format. I use <a href=\"https://www.npmjs.com/package/slug\">slug</a> NPM package to create a\nurl path for blog posts. I also have to parse the date of the\nposts and format it.</p>\n<p>The blog post page needs the content of the blog post.\nIn order to do that, I need to search for the blog post file\nusing the slug from the url path. Once I get the file,\nI need to convert the markdown content to HTML using <a href=\"https://www.npmjs.com/package/remark\">remark</a>.</p>\n<p>Now that the data and rendering of the posts are ready, I used\nTailwind.css to style the website. Tailwind.css's utility class\nfirst approach to style is wonderful to use. I haven't written\na single line of my own style. Instead all I did was\nadd classes to DOM. All the complexities with CSS that's not\nfun to deal with is happily abstracted away.\nI had to add <a href=\"https://github.com/iandinwoodie/github-markdown-tailwindcss\">markdown</a> style that was created by someone else,\nbut that was easy to do.</p>\n<p>It is more work to create moving parts yourself, but knowing\nhow different pieces fit together gives you abiliity to\nmodify as you would like to. I would like to add sitemap\nand RSS feed to my blog.</p>\n<p>I have the code for the blog <a href=\"https://github.com/serv/serv.github.io/tree/develop\">here</a>.</p>\n<p>Here are some additional resources that I used to create the blog.</p>\n<ul>\n<li><a href=\"https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source\">Configuring github pages</a></li>\n<li><a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">Next.js blog example</a></li>\n</ul>\n"}},"__N_SSG":true}