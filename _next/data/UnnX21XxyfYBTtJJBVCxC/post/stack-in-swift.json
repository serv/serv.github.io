{"pageProps":{"post":{"title":"Stack in Swift","createdAt":"2014-06-06T00:00:00-07:00","categories":["swift","algorithms"],"slug":"stack-in-swift","fullPath":"/Users/jasonkim/projects/websites/serv.github.io/_posts/2014-06-06-stack-in-swift.md","content":"<p>##tl;dr\nI wrote a stack using linked list in Swift</p>\n<hr>\n<p>When I try to learn a new language, I try writing\na stack using a linked list. This makes you learn a\nfew basic things about the language and helps you\nbecome familiar with the language faster. I decided to do\nthe same with Swift.</p>\n<p>As a prerequisite, you need XCode 6 Beta in order to run\nSwift.</p>\n<h3>1. Define classes</h3>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class Stack {</p>\n<p>}\n{% endhighlight %}</p>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class node {</p>\n<p>}\n{% endhighlight %}</p>\n<p>I created two classes in different files in XCode.</p>\n<h3>2. Define attributes of the Node class</h3>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class node {\nvar value: NSObject?\nvar next: Node?\n}\n{% endhighlight %}</p>\n<p>I defined two attributes called:</p>\n<ol>\n<li><code>value</code></li>\n<li><code>next</code></li>\n</ol>\n<p><code>value</code> is an optional attribute with <code>NSObject</code> type.\nFirst, <code>value</code> is optional because it may have <code>nil</code> value.\nSecond, <code>value</code> is typed as <code>NSObject</code> because we want\nthe Node to handle multiple types of value such as\ninteger, double and string.</p>\n<p><code>next</code> is also on optional attribute because some nodes may\nnot have any next node. So <code>next</code> might be <code>nil</code>. <code>next</code>\nis typed as <code>Node</code> because it points to another node.</p>\n<h3>3. <code>init</code> functions in Node</h3>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class Node {\nvar value: NSObject?\nvar next: Node?</p>\n<p>  init() {</p>\n<p>  }</p>\n<p>  init(value: NSObject) {\nself.value = value\nself.next = Node()\n}\n}\n{% endhighlight %}</p>\n<p>We want two <code>init</code> functions because we want to\ninstantiate a node with some <code>value</code> or without anything.\nWe are done with Node class</p>\n<h3>4. <code>init</code> function for Stack and its attributes</h3>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class Stack {\nvar count: Int = 0\nvar head: Node = Node()</p>\n<p>  init() {\n}\n}\n{% endhighlight %}</p>\n<p>Stack has <code>head</code> and <code>count</code> attributes.\n<code>head</code> points to the top of the stack.\n<code>count</code> has the total number of nodes in the stack.</p>\n<h3>5. <code>isEmpty</code> function</h3>\n<p>{% highlight swift %}\nimport Foundation</p>\n<p>class Stack {\nvar count: Int = 0\nvar head: Node = Node()</p>\n<p>  init() {\n}</p>\n<p>  func isEmpty() -> Boolean {\nreturn self.count == 0\n}\n}\n{% endhighlight %}</p>\n<p><code>isEmpty</code> function returns <code>true</code> if the stack is empty\nand returns <code>false</code> if the stack is not empty.</p>\n<h3>6. <code>push</code> function</h3>\n<p><code>push</code> function inserts some value to the top of the stack.</p>\n<p>{% highlight swift %}\nfunc push(value: NSObject) {\nif isEmpty() {\nself.head = Node()\n}</p>\n<p>  var node = Node(value: value)\nnode.next = self.head\nself.head = node\nself.count++\n}\n{% endhighlight %}</p>\n<h3>7. <code>pop</code> function</h3>\n<p><code>pop</code> function removes some value from the top\nof the stack.</p>\n<p>{% highlight swift %}\nfunc pop() -> NSObject? {\nif isEmpty() {\nreturn nil\n}</p>\n<p>  var node = self.head\nself.head = node.next!\nself.count--</p>\n<p>  return node.value\n}\n{% endhighlight %}</p>\n<p>This function has optional return type because if the\nstack is empty, it should return nothing, <code>nil</code>.</p>\n<p>In the line, <code>self.head = node.next!</code>, we use <code>!</code> to force\nthe optional variable to unwrap its value.</p>\n<hr>\n<p>You can see the <a href=\"https://github.com/serv/algorithms-in-swift/tree/master/DataStructuresAndAlgorithmsInSwift/StackLinkedList/StackLinkedList\">full source code on github</a>.</p>\n"}},"__N_SSG":true}