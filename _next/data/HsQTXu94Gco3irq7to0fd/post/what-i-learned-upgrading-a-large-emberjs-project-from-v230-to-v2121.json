{"pageProps":{"post":{"title":"What I learned upgrading a large Ember.js project from v2.3.0 to v2.12.1","createdAt":"2017-05-28T00:00:00-07:00","categories":["software development"],"slug":"what-i-learned-upgrading-a-large-emberjs-project-from-v230-to-v2121","fullPath":"/Users/jasonkim/projects/websites/serv.github.io/_posts/2017-05-28-upgrading-ember.md","content":"<p>I worked on upgrading a ~19 KLOC Ember.js codebase.\nThe previous Ember.js version was 2.3.0.\nNow it is 2.12.1. Here, I am going to discuss why I had to upgrade\nEmber.js, general approach to solving problems while upgrading a\nframework.</p>\n<p>For a long time, Ember.js version 2.3.0 served us just fine. The framework\npretty much provided us with everything we needed out of\nthe box and small flaws here and there didn't bother us. However, over\ntime, there started to arise several glaring problems with using an\nolder Ember.js version.</p>\n<p>As our app grew larger with some pages generating a large number of\ncomponents in a view, we experienced noticeable performance degredation in\nDOM rendering. To mitigate this problem, we used an alternative way to\nrender components, <a href=\"https://www.npmjs.com/package/ember-cli-raw-handlebars\">ember-cli-raw-handlebars</a> which stripped away much of Ember related functionalities from the view\nin order to increase the DOM rendering speed. The trade off for this was\nintroducing the \"none-Ember.js\" way of organizing our codebase, which made\nour codebase look rather messy.</p>\n<p>Using older Ember.js also made it hard to use newer packages out in the wild.\nWhen we wanted to introduce a new package or upgrade an existing package\nto a newer version, the Ember framework started to throw cryptic errors\nthat were hard to debug and fix. The cost of not upgrading Ember.js became\ngreater than the convenience of relying on an older Ember.js.</p>\n<h2>Procedure to upgrade Ember.js</h2>\n<p>Ember v2.3.0 came out on Jan 17, 2016. A lot has changed since then. Simply\nbumping the Ember version to the latest simply will not work. There will\nbe a lot of noticeable and unnoticeable bugs from doing that. Fixing those bugs\nall at once is very difficult. I built a procedure to safely upgrade Ember.js\nwithout creating tons of regressions.</p>\n<p>I needed Ember.js upgrade only branch on beta environment. Upgrading Ember.js\nof a large endeavor takes a long time. Most likely, you will be asked to develop\nfeatures and fix bugs while you are working on upgrade Ember. For that reason,\npreparing an isolated Ember.js upgrade only branch on beta will be\nuseful to allow QA to test the branch while you are working on other features.</p>\n<p>I wrote more automated tests. While I was making changes to the Ember.js\nupgrade branch, I needed to make sure that I wasn't breaking things while\nI fix an issue. Automated tests helped me make sure that I make\nsafe changes that are tested.</p>\n<p>Since your team most likely will QA and review your changes, they will\nalso need to know how to prepare the development environment for the\nEmber upgrade and how to bring it back to their own normal development\nenvironment. I made sure this is clearly described and communicated to\nothers.</p>\n<p>Having some dedicated QA time is also really important. Framework update\ntouches all aspects of the app, and every core functionalities need to\nbe tested thoroughly before the change is released on production.</p>\n<p>I used binary search like algorithm to bump the versions to the move towards\nthe latest version.</p>\n<p>{% highlight ruby %}\ndef next_non_erroring_version(start_version, destination_version)\nreturn start_version if start_version == destination_version</p>\n<p>  half_way = (destination_version - start_version) / 2</p>\n<p>  if causes_error?(half_way)\nnext_non_erroring_version(start_version, half_way - patch_version('0.0.1'))\nelse\nnext_non_erroring_version(half_way + patch_version('0.0.1'), destination_version)\nend\nend</p>\n<p>next_non_erroring_version('2.3.0', '2.12.1') + patch_version('0.0.1')\n{% endhighlight %}</p>\n<p>The method above tries to find the first version closest to the original\nversion to causes error.</p>\n"}},"__N_SSG":true}